#include <iostream>  // Підключаємо бібліотеку iostream для операцій вводу та виводу
#include <algorithm> // Підключаємо бібліотеку algorithm для функцій, таких як std::sort
#include <vector>    // Підключаємо бібліотеку vector для використання контейнера std::vector

int main() { // Точка входу в програму
    const int m = 12; // Визначаємо константу m зі значенням 12, що представляє розмір масиву
    std::vector<int> arr(m); // Оголошуємо вектор arr з m елементами (спочатку не ініціалізованими)

    // Запитуємо користувача ввести цілі числа
    std::cout << "Enter " << m << " integers:\n"; // Виводимо повідомлення, що потрібно ввести m цілих чисел
    for (int i = 0; i < m; ++i) { // Цикл від 0 до m-1 для отримання m цілих чисел від користувача
        std::cin >> arr[i]; // Зчитуємо ціле число з стандартного вводу і зберігаємо його у векторі за індексом i
    }

    // Сортуємо масив у зростаючому порядку
    std::sort(arr.begin(), arr.end()); // Використовуємо std::sort для сортування елементів вектора від початку до кінця
    std::cout << "Array in ascending order:\n"; // Виводимо повідомлення, що буде показано відсортований масив
    for (int i = 0; i < m; ++i) { // Цикл для виводу відсортованого масиву
        std::cout << arr[i] << " "; // Виводимо кожен елемент, за яким слідує пробіл
    }
    std::cout << std::endl; // Виводимо перевід рядка для кращої читабельності

    // Сортуємо масив у спадаючому порядку
    std::sort(arr.rbegin(), arr.rend()); // Використовуємо std::sort з реверсними ітераторами для сортування в спадаючому порядку
    std::cout << "Array in descending order:\n"; // Виводимо повідомлення, що буде показано відсортований масив у спаду
    for (int i = 0; i < m; ++i) { // Цикл для виводу відсортованого масиву
        std::cout << arr[i] << " "; // Виводимо кожен елемент, за яким слідує пробіл
    }
    std::cout << std::endl; // Виводимо перевід рядка для кращої читабельності

    return 0; // Повертаємо 0, щоб вказати на успішне завершення програми
}
